@model MapModel

   

    <h3>My Google Maps Demo</h3>
    <!--The div element for the map -->
    <div id="map"></div>
    <form asp-action="Map" method="post">
      <p>
        <label asp-for="Lat">Lat: </label>
        <input asp-for="Lat" />
      </p>
      <p>
        <label asp-for="Long">Lat: </label>
        <input asp-for="Long" />
      </p>
      <button type="submit">Submit</button>
    </form>
    <script>
// Initialize and add the map
function initMap() {
  // The location of Uluru
  var uluru = { lat: -25.344, lng: 131.036 };
  // The map, centered at Uluru
  var map = new google.maps.Map(document.getElementById("map"), {
    zoom: 4,
    center: uluru
  });
  // The marker, positioned at Uluru
  var marker = new google.maps.Marker({ position: uluru, map: map });

  //Listen for any clicks on the map.
  google.maps.event.addListener(map, "click", function(event) {
    //Get the location that the user clicked.
    var clickedLocation = event.latLng;
    //If the marker hasn't been added.
    if (marker === false) {
      //Create the marker.
      marker = new google.maps.Marker({
        position: clickedLocation,
        map: map,
        draggable: true //make it draggable
      });
      //Listen for drag events!
      google.maps.event.addListener(marker, "dragend", function(event) {
        markerLocation();
      });
    } else {
      //Marker has already been added, so just change its location.
      marker.setPosition(clickedLocation);
    }
    //Get the marker's location.
    markerLocation();
  });

  //This function will get the marker's current location and then add the lat/long
  //values to our textfields so that we can save the location.
  function markerLocation() {
    //Get location.
    var currentLocation = marker.getPosition();
    //Add lat and lng values to a field that we can save.
    document.getElementById("Lat").value = currentLocation.lat(); //latitude
    document.getElementById("Long").value = currentLocation.lng(); //longitude
  }
}</script>
    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=@MyCredentials.GOOGLE_MAPS_APIKEY&callback=initMap"></script>